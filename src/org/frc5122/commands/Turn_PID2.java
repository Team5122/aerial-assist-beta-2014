package org.frc5122.commands;

import org.frc5122.Robot;
import org.frc5122.RobotMap;



//import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.command.PIDCommand;

import org.frc5122.Robot;
import org.frc5122.subsystems.Drivetrain;

/**
 *
 */
public class  Turn_PID2 extends PIDCommand {
	
	private double degrees;
	double THRESH = 5;

    public Turn_PID2(double degrees, double kp) {
    	//String name, double p, double i, double d, double period
    	super("Turn_PID2", kp, 0.0, 0.0, 0.02);
        getPIDController().setContinuous(false);
        getPIDController().setAbsoluteTolerance(0.2);
        this.degrees = degrees;
	
        // Use requires() here to declare subsystem dependencies
        requires(Robot.drivetrain);
	
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    protected double returnPIDInput() {
        // Return your input value for the PID loop
        // e.g. a sensor, like a potentiometer:
        // yourPot.getAverageVoltage() / kYourMaxVoltage;
    	
    	return RobotMap.gyro.pidGet();
		
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SOURCE
        
        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SOURCE
    }

    protected void usePIDOutput(double output) {
        // Use output to drive your system, like a motor
        // e.g. yourMotor.set(output);
    	
    	double leftSpeed = output;
    	double rightSpeed = output;
    	if (degrees < 0)
    		leftSpeed = -leftSpeed;
    	else if (degrees > 0)
    		rightSpeed = -rightSpeed;
    	System.out.println("ls: "+leftSpeed+" Rs: "+rightSpeed);
    	Robot.drivetrain.TankDrive(leftSpeed, rightSpeed);

    }

    // Called just before this Command runs the first time
    protected void initialize() {
    	RobotMap.gyro.reset();
    	getPIDController().setSetpoint(degrees);
    	getPIDController().enable();
    }

    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
    	
    }

    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
        return getPIDController().getError() <= THRESH;
    }

    // Called once after isFinished returns true
    protected void end() {
    	getPIDController().disable();
    	Robot.drivetrain.Stop();
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
    	end();
    }
}
